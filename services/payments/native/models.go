// Copyright 2021 Tencent Inc. All rights reserved.
//
// Native支付
//
// Native支付API
//
// API version: 1.2.3

// Code generated by WechatPay APIv3 Generator based on [OpenAPI Generator](https://openapi-generator.tech); DO NOT EDIT.

package native

import (
	"encoding/json"
	"fmt"
	"time"
)

// Amount
type Amount struct {
	// 订单总金额，单位为分
	Total *int32 `json:"total,omitempty"`
	// CNY：人民币，境内商户号仅支持人民币。
	Currency *string `json:"currency,omitempty"`
}

func (o Amount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Total != nil {
		toSerialize["total"] = o.Total
	}

	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

// CloseOrderRequest
type CloseOrderRequest struct {
	OutTradeNo *string `json:"out_trade_no"`
	// 直连商户号
	Mchid *string `json:"mchid"`
}

func (o CloseOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutTradeNo == nil {
		return nil, fmt.Errorf("field `OutTradeNo` is required and must be specified in CloseOrderRequest")
	}
	toSerialize["out_trade_no"] = o.OutTradeNo

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in CloseOrderRequest")
	}
	toSerialize["mchid"] = o.Mchid
	return json.Marshal(toSerialize)
}

// CloseRequest
type CloseRequest struct {
	// 直连商户号
	Mchid *string `json:"mchid"`
}

func (o CloseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in CloseRequest")
	}
	toSerialize["mchid"] = o.Mchid
	return json.Marshal(toSerialize)
}

// Detail 优惠功能
type Detail struct {
	// 1.商户侧一张小票订单可能被分多次支付，订单原价用于记录整张小票的交易金额。 2.当订单原价与支付金额不相等，则不享受优惠。 3.该字段主要用于防止同一张小票分多次支付，以享受多次优惠的情况，正常支付订单不必上传此参数。
	CostPrice *int32 `json:"cost_price,omitempty"`
	// 商家小票ID。
	InvoiceId   *string        `json:"invoice_id,omitempty"`
	GoodsDetail *[]GoodsDetail `json:"goods_detail,omitempty"`
}

func (o Detail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.CostPrice != nil {
		toSerialize["cost_price"] = o.CostPrice
	}

	if o.InvoiceId != nil {
		toSerialize["invoice_id"] = o.InvoiceId
	}

	if o.GoodsDetail != nil {
		toSerialize["goods_detail"] = o.GoodsDetail
	}
	return json.Marshal(toSerialize)
}

// GoodsDetail
type GoodsDetail struct {
	// 由半角的大小写字母、数字、中划线、下划线中的一种或几种组成。
	MerchantGoodsId *string `json:"merchant_goods_id"`
	// 微信支付定义的统一商品编号（没有可不传）。
	WechatpayGoodsId *string `json:"wechatpay_goods_id,omitempty"`
	// 商品的实际名称。
	GoodsName *string `json:"goods_name,omitempty"`
	// 用户购买的数量。
	Quantity *int32 `json:"quantity"`
	// 商品单价，单位为分。
	UnitPrice *int32 `json:"unit_price"`
}

func (o GoodsDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.MerchantGoodsId == nil {
		return nil, fmt.Errorf("field `MerchantGoodsId` is required and must be specified in GoodsDetail")
	}
	toSerialize["merchant_goods_id"] = o.MerchantGoodsId

	if o.WechatpayGoodsId != nil {
		toSerialize["wechatpay_goods_id"] = o.WechatpayGoodsId
	}

	if o.GoodsName != nil {
		toSerialize["goods_name"] = o.GoodsName
	}

	if o.Quantity == nil {
		return nil, fmt.Errorf("field `Quantity` is required and must be specified in GoodsDetail")
	}
	toSerialize["quantity"] = o.Quantity

	if o.UnitPrice == nil {
		return nil, fmt.Errorf("field `UnitPrice` is required and must be specified in GoodsDetail")
	}
	toSerialize["unit_price"] = o.UnitPrice
	return json.Marshal(toSerialize)
}

// PrepayRequest
type PrepayRequest struct {
	// 公众号ID
	Appid *string `json:"appid"`
	// 直连商户号
	Mchid *string `json:"mchid"`
	// 商品描述
	Description *string `json:"description"`
	// 商户订单号
	OutTradeNo *string `json:"out_trade_no"`
	// 订单生成时间，格式为rfc3339格式
	TimeExpire *time.Time `json:"time_expire,omitempty"`
	// 附加数据
	Attach *string `json:"attach,omitempty"`
	// 有效性：1. HTTPS；2. 不允许携带查询串。
	NotifyUrl *string `json:"notify_url"`
	// 商品标记，代金券或立减优惠功能的参数。
	GoodsTag *string `json:"goods_tag,omitempty"`
	// 指定支付方式
	LimitPay *[]string `json:"limit_pay,omitempty"`
	// 传入true时，支付成功消息和支付详情页将出现开票入口。需要在微信支付商户平台或微信公众平台开通电子发票功能，传此字段才可生效。
	SupportFapiao *bool       `json:"support_fapiao,omitempty"`
	Amount        *Amount     `json:"amount"`
	Detail        *Detail     `json:"detail,omitempty"`
	SettleInfo    *SettleInfo `json:"settle_info,omitempty"`
	SceneInfo     *SceneInfo  `json:"scene_info,omitempty"`
}

func (o PrepayRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Appid == nil {
		return nil, fmt.Errorf("field `Appid` is required and must be specified in PrepayRequest")
	}
	toSerialize["appid"] = o.Appid

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in PrepayRequest")
	}
	toSerialize["mchid"] = o.Mchid

	if o.Description == nil {
		return nil, fmt.Errorf("field `Description` is required and must be specified in PrepayRequest")
	}
	toSerialize["description"] = o.Description

	if o.OutTradeNo == nil {
		return nil, fmt.Errorf("field `OutTradeNo` is required and must be specified in PrepayRequest")
	}
	toSerialize["out_trade_no"] = o.OutTradeNo

	if o.TimeExpire != nil {
		toSerialize["time_expire"] = o.TimeExpire.Format(time.RFC3339)
	}

	if o.Attach != nil {
		toSerialize["attach"] = o.Attach
	}

	if o.NotifyUrl == nil {
		return nil, fmt.Errorf("field `NotifyUrl` is required and must be specified in PrepayRequest")
	}
	toSerialize["notify_url"] = o.NotifyUrl

	if o.GoodsTag != nil {
		toSerialize["goods_tag"] = o.GoodsTag
	}

	if o.LimitPay != nil {
		toSerialize["limit_pay"] = o.LimitPay
	}

	if o.SupportFapiao != nil {
		toSerialize["support_fapiao"] = o.SupportFapiao
	}

	if o.Amount == nil {
		return nil, fmt.Errorf("field `Amount` is required and must be specified in PrepayRequest")
	}
	toSerialize["amount"] = o.Amount

	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}

	if o.SettleInfo != nil {
		toSerialize["settle_info"] = o.SettleInfo
	}

	if o.SceneInfo != nil {
		toSerialize["scene_info"] = o.SceneInfo
	}
	return json.Marshal(toSerialize)
}

// PrepayResponse
type PrepayResponse struct {
	// 二维码链接
	CodeUrl *string `json:"code_url"`
}

func (o PrepayResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.CodeUrl == nil {
		return nil, fmt.Errorf("field `CodeUrl` is required and must be specified in PrepayResponse")
	}
	toSerialize["code_url"] = o.CodeUrl
	return json.Marshal(toSerialize)
}

// QueryOrderByIdRequest
type QueryOrderByIdRequest struct {
	TransactionId *string `json:"transaction_id"`
	// 直连商户号
	Mchid *string `json:"mchid"`
}

func (o QueryOrderByIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.TransactionId == nil {
		return nil, fmt.Errorf("field `TransactionId` is required and must be specified in QueryOrderByIdRequest")
	}
	toSerialize["transaction_id"] = o.TransactionId

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in QueryOrderByIdRequest")
	}
	toSerialize["mchid"] = o.Mchid
	return json.Marshal(toSerialize)
}

// QueryOrderByOutTradeNoRequest
type QueryOrderByOutTradeNoRequest struct {
	OutTradeNo *string `json:"out_trade_no"`
	// 直连商户号
	Mchid *string `json:"mchid"`
}

func (o QueryOrderByOutTradeNoRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.OutTradeNo == nil {
		return nil, fmt.Errorf("field `OutTradeNo` is required and must be specified in QueryOrderByOutTradeNoRequest")
	}
	toSerialize["out_trade_no"] = o.OutTradeNo

	if o.Mchid == nil {
		return nil, fmt.Errorf("field `Mchid` is required and must be specified in QueryOrderByOutTradeNoRequest")
	}
	toSerialize["mchid"] = o.Mchid
	return json.Marshal(toSerialize)
}

// SceneInfo 支付场景描述
type SceneInfo struct {
	// 用户终端IP
	PayerClientIp *string `json:"payer_client_ip"`
	// 商户端设备号
	DeviceId  *string    `json:"device_id,omitempty"`
	StoreInfo *StoreInfo `json:"store_info,omitempty"`
}

func (o SceneInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.PayerClientIp == nil {
		return nil, fmt.Errorf("field `PayerClientIp` is required and must be specified in SceneInfo")
	}
	toSerialize["payer_client_ip"] = o.PayerClientIp

	if o.DeviceId != nil {
		toSerialize["device_id"] = o.DeviceId
	}

	if o.StoreInfo != nil {
		toSerialize["store_info"] = o.StoreInfo
	}
	return json.Marshal(toSerialize)
}

// SettleInfo
type SettleInfo struct {
	// 是否指定分账
	ProfitSharing *bool `json:"profit_sharing,omitempty"`
}

func (o SettleInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.ProfitSharing != nil {
		toSerialize["profit_sharing"] = o.ProfitSharing
	}
	return json.Marshal(toSerialize)
}

// StoreInfo 商户门店信息
type StoreInfo struct {
	// 商户侧门店编号
	Id *string `json:"id"`
	// 商户侧门店名称
	Name *string `json:"name,omitempty"`
	// 地区编码，详细请见微信支付提供的文档
	AreaCode *string `json:"area_code,omitempty"`
	// 详细的商户门店地址
	Address *string `json:"address,omitempty"`
}

func (o StoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}

	if o.Id == nil {
		return nil, fmt.Errorf("field `Id` is required and must be specified in StoreInfo")
	}
	toSerialize["id"] = o.Id

	if o.Name != nil {
		toSerialize["name"] = o.Name
	}

	if o.AreaCode != nil {
		toSerialize["area_code"] = o.AreaCode
	}

	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}
